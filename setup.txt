----- Category ekleme, silme ve listelenebilme kodları (CategoryManager):

            @Override
            public void add(CategoryForAddDto request) {
                categoryWithSameNameShouldNotExist(request.getCategoryName());
                categoryNameLengthExceeded(request.getCategoryName(), 20);
                Category category = new Category();
                category.setCategoryName(request.getCategoryName());
                category.setDescription(request.getDescription());

                categoryRepository.save(category);
            }

             @Override
              public void delete(int id) {
                  Category category = categoryRepository.findByCategoryId(id);
                  System.out.println(category);
                  categoryRepository.deleteById(id);
              }

                @Override
                public List<CategoryForListingDto> getAll() {
                    // DTO => Data Transfer Object
                    return categoryRepository.getForListing();
                }


-----  Ürün eklerken ve güncellerken aşağıdaki kurallar uygulanmalıdır
       Ürün ismi 3 haneden kısa olamaz.
       Supplier id ve category id boş geçilemez ve 0'dan küçük eşit olamaz
       Unit Price boş geçilemez ve 0'dan küçük olamaz
       Stock bilgisi 0dan küçük olamaz

        @Getter
        @Setter
        @NoArgsConstructor
        @AllArgsConstructor
        public class ProductForAddDto {

            @NotBlank(message = "Ürün adı girmek zorunludur.")
            @Size(min = 3)
            private String productName;

            @NotBlank(message = "Ürün sayısı girmek zorunludur.")
            @Min(10)
            private String quantityPerUnit;

            @NotEmpty(message = "Unit Price değeri boş olamaz")
            @Min(0)
            private double unitPrice;

            @Min(0)
            private int unitsInStock;

            private int unitsOnOrder;

            @Min(1)
            @NotNull(message = "Supplier ID değeri boş olamaz")
            private int supplierId;

            @Min(1)
            @NotEmpty(message = "Category ID değeri boş olamaz")
            private int categoryId;
        }

    ProductManager içerisine eklenen Bussiness Exception -    Birebir aynı isimde ikinci ürün eklenemez :

      private void addProductMustHaveUniqueName(String newProductName) {
            Product existingProduct = productRepository.findByProductName(newProductName);
            if (existingProduct != null) {
                throw new BusinessException("Bu isimde bir ürün zaten mevcut, ürün isimleri benzersiz olmalıdır.");
            }
        }


-----  *Uygulamanızda sipariş modülü eklenmeli ve aşağıdaki gibi çalışmalıdır;
       *Sipariş eklenebilmelidir ve sipariş eklenirken gönderilen ürünler order_details tablosunda tutulmalıdır.
       *Sipariş eklenirken aşağıdaki kurallar uygulanmalıdır.
       Customer_ID boş geçilemez ve verilen ID ile db'de bir Customer olması zorunludur.
       Employee_ID boş geçilemez ve verilen ID ile db'de bir Employee olması zorunludur.
       Order Date gönderilmemeli kod kısmında otomatik olarak o anın tarihine set edilmelidir.
       Required Date kullanıcı tarafından gönderilmeli ve o günün tarihinden daha geçmiş bir tarih gönderilmemelidir.
       Shipped Date başlangıçta null geçilmelidir.
       Order tablosu için diğer alanlar için bir kural/validation uygulama zorunluluğunuz yoktur.


       Order ile OrderDetails arasında order_id'ye göre birden fazla OrderDetails eklemek için ilişkisel bir yapı kurmamız gerekiyor.
       Ayrıca Employee ile Orders arasında bulunan ilişkisel yapıyı da düzenledim.


       Order.class:
                @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
                private List<OrderDetails> orderDetailsList = new ArrayList<>();

       OrderDetails.class:
                @ManyToOne
                @JoinColumn(name = "order_id", insertable=false, updatable=false)
                private Order order;

       Employee.class:
                @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
                private List<Order> orders;

       Ayrıca veritabanında ayırt edici özellik olan benzersiz bire orderDetailsId mevcut değildi. Bundan kaynaklı olarak OrderdetailsRepository'de
       Jpa'yı etkili bir şekilde kullanamıyorduk. Onun için OrderDetails classına OrderDetailsId ekledim

                    @Id
                    @GeneratedValue(strategy = GenerationType.IDENTITY)
                    @Column(name = "order_details_id")
                    private int orderDetailsId;

       Bir diğer yaşadığım sorun ise şu şekilde:

                 "java.lang.StackOverflowError\r\n\tat com.turkcell.spring.starter.entities.OrderDetails.toString(OrderDetails.java:6)\r\n\tat java.base/java.lang.String.valueOf(String.java:4218)\r\n\tat java.base/java.lang.StringBuilder.append(StringBuilder.java:173)\r\n\tat java.base/java.util.AbstractCollection.toString(AbstractCollection.java:457)\r\n\tat org.hibernate.collection.spi.PersistentBag.toString(PersistentBag.java:590)\r\n\tat java.base/java.lang.StringConcatHelper.stringOf(StringConcatHelper.java:453)\r\n\tat com.turkcell.spring.starter.entities.Order.toString(Order.java:9)\r\n\tat java.base/java.lang.StringConcatHelper.stringOf(StringConcatHelper.java:453)\r\n\tat com.turkcell.spring.starter.entities.OrderDetails.toString(OrderDetails.java:6)\r\n\tat java.base/java.lang.String.valueOf(String.java:4218)\r\n\tat java.base/java.lang.StringBuilder.append(StringBuilder.java:173)\r\n\tat java.base/java.util.AbstractCollection.toString(AbstractCollection.java:457)\r\


                 Bunun çözümünü araştırdım ve stackoverflow'da  benzer bir sorunu yaşayan birini buldum:

                 https://stackoverflow.com/questions/68698590/error-while-adding-account-details-in-manytomany-relationship-with-customer-in-s
                 Bu sorunun nedeni, Order ve OrderDetails sınıflarındaki toString metotlarının döngüsel olarak birbirini çağırması şeklinde. Yani Order sınıfı içindeki OrderDetails sınıfını ve OrderDetails sınıfı içindeki Order sınıfını çağırıyor.
                 Bunun için birbiri ile ilişkisel yapıda bulunan classlara toString metotlarını @override olarak ekledim.

                     @Override
                     public String toString() {
                         return "Order{" +
                                 "orderId=" + orderId +
                                 ", orderDate='" + orderDate + '\'' +
                                 ", requiredDate='" + requiredDate + '\'' +
                                 ", freight=" + freight +
                                 ", shipCity='" + shipCity + '\'' +
                                 ", shipCountry='" + shipCountry + '\'' +
                                 ", customerId='" + customerId + '\'' +
                                 ", employee=" + employee +
                                 ", orderDetailsList=" + orderDetailsList +
                                 '}';
                     }

                       @Override
                         public String toString() {
                             return "OrderDetails{" +
                                     "orderDetailsId=" + orderDetailsId +
                                     ", orderId=" + orderId +
                                     ", productId=" + productId +
                                     ", unitPrice=" + unitPrice +
                                     ", quantity=" + quantity +
                                     ", discount=" + discount +
                                     '}';
                         }

                             @Override
                             public String toString() {
                                 return "Employee{" +
                                         "employeeId=" + employeeId +
                                         ", firstName='" + firstName + '\'' +
                                         ", lastName='" + lastName + '\'' +
                                         ", title='" + title + '\'' +
                                         ", titleOfCourtesy='" + titleOfCourtesy + '\'' +
                                         ", birthDate='" + birthDate + '\'' +
                                         ", hireDate='" + hireDate + '\'' +
                                         ", address='" + address + '\'' +
                                         ", city='" + city + '\'' +
                                         ", region='" + region + '\'' +
                                         ", postalCode='" + postalCode + '\'' +
                                         ", country='" + country + '\'' +
                                         ", homePhone='" + homePhone + '\'' +
                                         ", extension='" + extension + '\'' +
                                         ", notes='" + notes + '\'' +
                                         '}';
                             }


       Gerekli işlemleri OrderManager içerisinde gerçekleştirdim.


----- *Sipariş eklenirken request içerisine aynı zamanda ürünler adetleri ile birlikte gönderilmelidir.
      Ürün adeti 0'dan küçük eşit olamaz.
      Buradaki ürünün unit_price'ı ürün idsi kullanılarak ürünler tablosundan çekilmelidir.
      Bu ürünler order_details'e atılmalı order_id olarak yeni eklenen order'ın idsi ve diğer alanlara üründen gelen bilgiler girilmelidir (discount'ı 0 alınız)
      Eğer ilgili üründen talep edilen adet kadar yoksa adet verilebilecek max. stok olarak güncellenmelidir. örn: 5 adet X ürünü istenmiş stokta 3 adet varsa bu tabloya 3 adet yazılmalı.
      Siparişe eklenen her ürünün stok adeti quantity kadar azaltılmalıdır.


      Bunun için ekstra olarak OrderManager'a ProductRepository'i ekledim. ProductRepository içerisine update işlemi için:

              @Transactional
              @Modifying
              @Query("UPDATE Product p SET p.unitsInStock = :unitsInStock WHERE p.productId = :productId")
              void updateUnitsInStock(@Param("productId") int productId, @Param("unitsInStock") int unitsInStock);

      Kodunu ekledim.

----- Siparişler içerisindeki ürünler ve bu ürünlerin isimleriyle birlikte listelenebilmelidir (iki adet join order,order_details,product)

        OrderRepository'de Query oluşturdum:

        @Query("SELECT o.orderId, p.productName, od.quantity FROM Order o INNER JOIN OrderDetails od ON o.orderId = od.orderId INNER JOIN Product p ON od.productId = p.productId")
        List<Object[]> getOrdersWithProductNames();